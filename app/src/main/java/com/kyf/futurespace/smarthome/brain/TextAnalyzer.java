/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.kyf.futurespace.smarthome.brain;

import android.os.Handler;
import android.os.Message;
import android.util.Log;

import com.kyf.futurespace.smarthome.utils.Data;
import com.kyf.futurespace.smarthome.utils.HandlerMessageWhat;
import com.kyf.futurespace.smarthome.utils.Task;
import com.kyf.futurespace.smarthome.utils.Wordtoi;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class TextAnalyzer {
    private final String TAG = "TextAnalyzer";
    private HashMap<String, String> orders = new HashMap();
    private HashMap<String, String> objects = new HashMap();
    private HashMap<String, String> conditions = new HashMap();
    private Boolean orderExisting = false;
    private Boolean objectExisting = false;
    Boolean conditionExisting = false;
    private String task = "";
    private String answer = "";
    private String answerObject, answerOrder = "";
    private Task newTask = new Task();
    private Handler mhandler;


    public TextAnalyzer(Handler handler) {
        orders.put("开", "00");
        orders.put("关", "01");
        orders.put("亮", "03");
        orders.put("暗", "04");
        objects.put("空调", "AC");
        objects.put("灯", "LI");
        objects.put("门", "DO");
        objects.put("窗", "WS");
        objects.put("冰箱", "RE");
        conditions.put("回来", "!BRDO0000");
        conditions.put("关灯", "!BRLI0001");
        conditions.put("开灯", "!BRLI0000");
        conditions.put("关门", "!BRDO0001");
        conditions.put("开门", "!BRDO0000");
        conditions.put("关空调", "!BRAC0001");
        conditions.put("开空调", "!BRAC0000");
        conditions.put("睡觉", "!BRLI0001");
        conditions.put("下雨", "!CSRS0001");
        mhandler = handler;
    }

//    public void newUpdate(String string) {
//
//        String inpString = string;
//        if (inpString.indexOf("好热") >= 0) {
//            Log.w(TAG, "找到好热");
//            if (!Data.isConditionAndOrderConnected()) {
//                Log.w(TAG, "未存在连接");
//                if (inpString.indexOf("空调") >= 0) {
//                    Data.setConditionAndOrderConnected(true);
//                    orderExisting = true;
//                    objectExisting = true;
//                    task = "!BRAC0000";
//                    answer = "空调已打开";
//                    return;
//                }
//            } else {
//                Log.w(TAG, "存在连接");
//                orderExisting = true;
//                objectExisting = true;
//                task = "!BRAC0000";
//                answer = "空调已打开";
//                return;
//            }
//        } else if (inpString.indexOf("回来") >= 0) {
//            String task2 = "!BR" + getObjectTask(inpString) + "00" + getOrderTask(inpString);
//            Log.w(TAG, "回家任务已设置");
//            task = "";
//            orderExisting = true;
//            objectExisting = true;
//        } else {
//            int temper = Wordtoi.converse(inpString);
//            if (temper == 0) {
//                task = "!BR" + getObjectTask(inpString) + "00" + getOrderTask(inpString);
//            } else {
//                if (inpString.indexOf("度") >= 0) {
//                    Log.w(TAG, "找到温度");
//                    String temperature = "00";
//                    if (temper < 10) {
//                        temperature = "0" + temper;
//                    } else {
//                        temperature = "" + temper;
//                    }
//                    Log.w(TAG, "温度：" + temperature);
//                    task = "!BR" + getObjectTask(inpString) + temperature + "00";
//                    orderExisting = true;
//                    objectExisting = true;
//                    Data.getInstance().setIsTemperature(true);
//                } else {
//                    task = "!BR" + getObjectTask(inpString) + "00" + getOrderTask(inpString);
//                }
//            }
//        }
//    }

    public void update(String string) {
        newTask.clear();
        if (string.contains("好热")) {
            Log.w(TAG, "找到好热");
            if (!Data.getInstance().isConditionAndOrderConnected()) {
                Log.w(TAG, "未存在连接");
                if (string.contains("空调")) {
                    Data.setConditionAndOrderConnected(true);
                    orderExisting = true;
                    objectExisting = true;
                    newTask.getOrder().add("!BRAC0000");
                    newTask.getAnswer().add("空调已打开");
                }
            } else {
                Log.w(TAG, "存在连接");
                orderExisting = true;
                objectExisting = true;
                newTask.getOrder().add("!BRAC0000");
                newTask.getAnswer().add("空调已打开");
                Data.getInstance().setTemperatureToAC(Data.getInstance().getTemperature());
                Thread thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        while (true) {
                            if (Data.getInstance().isConditionAndOrderConnected()) {
                                if (Data.getInstance().getTemperature() > (Data.getInstance().getTemperatureToAC() + 3)) {
                                    Message msg = new Message();
                                    msg.what = HandlerMessageWhat.OverTemperature_WakeAC;
                                    mhandler.sendMessage(msg);
                                    try {
                                        Thread.currentThread().sleep(1000 * 10);
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }
                    }
                });
                thread.start();
            }
        } else if (
                ((string.contains("时候"))) ||
                        (string.contains("如果"))
                ) {
            Log.w(TAG, "condition exist");
            String[] inps;
            if (string.contains("时候，")) {
                inps = string.split("时候，", 2);
            } else if (string.contains("时候")) {
                inps = string.split("时候", 2);
            } else if (string.contains("了")) {
                inps = string.split("了", 2);
            } else {
                inps = string.split("，", 2);
            }
            if (inps.length == 2) {
                Log.w(TAG, "inps0:" + inps[0] + ",inps1" + inps[1]);
                setConditions(inps[0]);
                if (inps[1].contains("，")) {
                    setMultiMission(inps[1]);
                } else {
                    setMission(inps[1]);
                }
//            Data.getInstance().setOrderWaitingForBluetooth(newTask);
                Data.getInstance().addTaskWaiting(newTask.getCondition(), newTask);
                Log.w(TAG, "taskNum:" + Data.getInstance().getTasksWaitingNum());
            }else {
                newTask.getOrder().add("");
                newTask.setCondition("");
                newTask.getAnswer().add("我比较笨，没听懂诶");
            }
        } else {
            Log.w(TAG, "condition don't exist");
            if (string.contains("，")) {
                Log.w(TAG, "MultiMission");
                setMultiMission(string);
            } else {
                Log.w(TAG, "singleMission");
                setMission(string);
            }
        }
    }

    private void setMultiMission(String string) {
        String[] inps = string.split("，");
        Log.w(TAG, "inps.length" + inps.length);
        for (String inp : inps) {
            int temper = Wordtoi.converse(inp);
            if (temper == 0) {
                task = "!BR" + getObjectTask(inp) + "00" + getOrderTask(inp);
                String answer = getAnswer();
                Log.w(TAG, "task" + task + ",answer" + answer);
                newTask.getOrder().add(task);
                newTask.getAnswer().add(answer);
                Log.w(TAG, "add finished");
            } else {
                if (inp.contains("度")) {
                    Log.w(TAG, "找到温度");
                    String temperature;
                    if (temper < 10) {
                        temperature = "0" + temper;
                    } else {
                        temperature = "" + temper;
                    }
                    Log.w(TAG, "温度：" + temperature);
                    task = "!BR" + getObjectTask(inp) + temperature + "00";
                    orderExisting = true;
                    objectExisting = true;
                } else {
                    task = "!BR" + getObjectTask(inp) + "00" + getOrderTask(inp);
                    orderExisting = true;
                    objectExisting = true;
                }
                String answer = getAnswer();
                Log.w(TAG, "task" + task + ",answer" + answer);
                newTask.getOrder().add(task);
                newTask.getAnswer().add(answer);
                Log.w(TAG, "add finished");
            }
        }
    }

    private void setMission(String string) {
        int temper = Wordtoi.converse(string);
        if (temper == 0) {
            task = "!BR" + getObjectTask(string) + "00" + getOrderTask(string);
            String answer = getAnswer();
            Log.w(TAG, "task" + task + ",answer" + answer);
            newTask.getOrder().add(task);
            newTask.getAnswer().add(answer);
            Log.w(TAG, "add finished");
        } else {
            if (string.contains("度")) {
                Log.w(TAG, "找到温度");
                String temperature = "00";
                if (temper < 10) {
                    temperature = "0" + temper;
                } else {
                    temperature = "" + temper;
                }
                Log.w(TAG, "温度：" + temperature);
                task = "!BR" + getObjectTask(string) + temperature + "00";
                orderExisting = true;
                objectExisting = true;
            } else {
                task = "!BR" + getObjectTask(string) + "00" + getOrderTask(string);
                orderExisting = true;
                objectExisting = true;
            }
            String answer = getAnswer();
            Log.w(TAG, "task" + task + ",answer" + answer);
            newTask.getOrder().add(task);
            newTask.getAnswer().add(answer);
            Log.w(TAG, "add finished");
        }
    }

    private void setConditions(String string) {
        Log.w(TAG, "开始寻找条件");
        for (Object o : conditions.entrySet()) {
            Map.Entry entry = (Map.Entry) o;
            String key = (String) entry.getKey();
            if (string.contains(key)) {
                Log.w(TAG, "找到条件" + key);
                conditionExisting = true;
                task = conditions.get(key);
                Log.w(TAG, "找到条件" + task);
                newTask.setCondition(task);
            }
        }
    }

    private String getObjectTask(String string) {
        Log.w(TAG, "开始寻找目标");
        for (Object o : objects.entrySet()) {
            Map.Entry entry = (Map.Entry) o;
            String key = (String) entry.getKey();
            if (string.contains(key)) {
                Log.w(TAG, "找到目标" + key);
                objectExisting = true;
                task = objects.get(key);
                answerObject = key;
                Log.w(TAG, "answerObject" + key);
            }
        }
        return task;
    }

    private String getOrderTask(String string) {
        Log.w(TAG, "开始寻找命令");
        for (Object o : orders.entrySet()) {
            Map.Entry entry = (Map.Entry) o;
            String key = (String) entry.getKey();
            if (string.contains(key)) {
                Log.w(TAG, "找到命令");
                orderExisting = true;
                task = orders.get(key);
                answerOrder = key;
                Log.w(TAG, "answerOrder" + key);
            }
        }
        return task;
    }

    public Boolean isOrderExisting() {
        return orderExisting;
    }

    public Boolean isObjectExisting() {
        return objectExisting;
    }

    public Boolean isConditionExisting() {
        return conditionExisting;
    }

    public Task getTask() {
        return newTask;
    }

    public String getAnswer() {
        switch (answerOrder) {
            case "开":
                answerOrder = "打开";
                break;
            case "关":
                answerOrder = "关闭";
                break;
            case "亮":
                answerOrder = "调亮";
                break;
            case "暗":
                answerOrder = "调暗";
                break;
            case "":
                answerOrder = "调节";
                break;
        }
        answer = answerObject + "已" + answerOrder;
        return answer;
    }

}
